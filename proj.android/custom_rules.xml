<?xml version="1.0" encoding="UTF-8"?>

<project name="cocos2dxdemo">
    <property file="build.properties"/>  
    <property name="out.jar.file" location="bin/aspect_classes.jar" />
    <property name="default.application.class" value="com.playscape.playscapeapp.PlayscapeApp"/>
    
	<property name="publishigkit.dir" location="../../PlayscapePubKitCocos2D-X" />
	<property name="publishigkit.assets" location="${publishigkit.dir}/proj.android/PlayscapePublishingKitX/assets" />
	<property name="target.assets" location="./assets" />
	
	<!-- configuration json url -->
	<property name="configuration.url" value="https://www.dropbox.com/s/pvbwe2lu25zu1ob/config.json?dl=1" />
	<!-- configuration json file -->
	<property name="downloaded.json.name" location="./configuration.json" />
	
	<!-- users configuration file name -->
    <property name="configuration.file.name" value="user_playscape_config_release.xml"/>
    <!-- users configuration file full path -->
    <property name="configuration.file.full.path" location="../../PlayscapePubKitCocos2D-X/proj.android/configs/${configuration.file.name}"/>
    <!-- configuration file path in project -->
	<property name="configuration.project.file.path" value="res/values/${configuration.file.name}"/>				
	
    <target name="-pre-build" depends="-apply-api-configuration">
        <xmlproperty file="AndroidManifest.xml" prefix="mymanifest" collapseAttributes="true"/>
        
        <path id="class.path">
            <pathelement path="${classpath}"/>
            <fileset dir="../../PlayscapePubKitCocos2D-X/build/tools/">
                <include name="xmltask.jar"/>
                <include name="com.oopsconsultancy.xmltask-1.16.jar"/>
            </fileset>
        </path>
        
        <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
            <classpath>
                <path refid="class.path"/>
            </classpath>
        </taskdef>
        
        <xmltask source="AndroidManifest.xml" dest="AndroidManifest.xml">
            <copy path="//manifest/application[@android:name]/text()" property="XML_EXISTS_ALREADY" />
            <attr path="//manifest/application" attr="android:name" value="${default.application.class}" unless="XML_EXISTS_ALREADY"/>
        </xmltask>
    </target>
    
    <target name="-pre-compile">
		<copy todir="${target.assets}" overwrite="true">
			<fileset dir="${publishigkit.assets}" />
		</copy>
	</target>
	
    <target name="-apply-api-configuration">
        <echo>Downloading configuration</echo>
          
        <!-- download configuration and store in temporary file -->
        <get src="${configuration.url}"  
            dest="${downloaded.json.name}" ignoreerrors="true"/>
         
        <echo>Parsing configuration</echo>
        
        <property name="local.libs.path" value="../../PlayscapePubKitCocos2D-X/build/tools/PlayscapeCPBootstrapBuilder/libs" />
		<property name="script.classpath" value="${local.libs.path}/bsf.jar${path.separator}${local.libs.path}/commons-logging-1.0.4.jar${path.separator}${local.libs.path}/js.jar${path.separator}${local.libs.path}/commons-codec-1.6.jar" />
	
        <!-- decode and get needed fields from json -->
        <script language="javascript" manager="bsf" classpath="${script.classpath}"> <!-- we use bsf scripting manager + rhino -->
            <![CDATA[
                importClass(java.io.File);
                importClass(java.io.FileReader);
                importClass(java.io.BufferedWriter);
                importClass(java.io.BufferedReader); 
                importClass(java.io.FileWriter);
                importClass(org.apache.tools.ant.util.FileUtils);
                importClass(java.net.URL);
                importClass(org.xml.sax.InputSource);
                importClass(java.io.FileInputStream);
                 
                // Read catalog
                try {
                	var file = new File("./configuration.json");
                	var bufferedReader = new BufferedReader(new FileReader(file));
                	var data = FileUtils.readFully(bufferedReader);
                	bufferedReader.close();
				
	                // Evaluate json
	                var jsonData = JSON.parse(data);
	                
	               	var confFilePath = cocos2dxdemo.getProperty("configuration.file.full.path");
	               	
	               	cocos2dxdemo.setProperty("admob_interstitials_ad_unit_id", jsonData.game_config.admob.interstitials_ad_unit_id);
	               	cocos2dxdemo.setProperty("admob_banners_ad_unit_id", jsonData.game_config.admob.banners_ad_unit_id);
	               	cocos2dxdemo.setProperty("admob_test_device_id", jsonData.game_config.admob.test_device_id);
	               	
	               	cocos2dxdemo.setProperty("chartboost_app_id", jsonData.game_config.chartboost.app_id);
	               	cocos2dxdemo.setProperty("chartboost_app_signature", jsonData.game_config.chartboost.app_signature);
	               	
	               	cocos2dxdemo.setProperty("vungle_app_id", jsonData.game_config.vungle.app_id);
	               	cocos2dxdemo.setProperty("millennialmedia_app_id", jsonData.game_config.millennialmedia.app_id);
	               	
	               	cocos2dxdemo.setProperty("startapp_developer_id", jsonData.game_config.startapp.developer_id);
	               	cocos2dxdemo.setProperty("startapp_app_id", jsonData.game_config.startapp.app_id);
	               	
	               	cocos2dxdemo.setProperty("adcolony_app_id", jsonData.game_config.adcolony.app_id);
	               	cocos2dxdemo.setProperty("adcolony_video_zone_id", jsonData.game_config.adcolony.video_zone_id);
	               	cocos2dxdemo.setProperty("adcolony_incentivised_video_zone_id", jsonData.game_config.adcolony.incentivised_video_zone_id);
	               	
	               	cocos2dxdemo.setProperty("cofiguration_downloaded", "true");
               	} catch (e) {
					//cocos2dxdemo.setProperty("cofiguration_downloaded", "false");
					
					var echo = cocos2dxdemo.createTask("echo");
					echo.setMessage(e.toString());
					echo.perform();
				}
           ]]>
        </script>
        
        <echo>Parsing configuration done</echo>
		
        <echo>Updating default configuration</echo>
        <echo>${cofiguration_downloaded}</echo>
        <echo>${configuration.file.full.path}</echo>
        
       <xmlproperty file="${configuration.file.full.path}" prefix="myconfig" collapseAttributes="true"/>
        
        <path id="class.path">
            <pathelement path="${classpath}"/>
            <fileset dir="../../PlayscapePubKitCocos2D-X/build/tools/">
                <include name="xmltask.jar"/>
                <include name="com.oopsconsultancy.xmltask-1.16.jar"/>
            </fileset>
        </path>
        
        <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
            <classpath>
                <path refid="class.path"/>
            </classpath>
        </taskdef>
        
        <xmltask source="${configuration.file.full.path}" dest="${configuration.file.full.path}">
            
            <replace path="//resources/string[@name='user_playscape_admob_interstitials_ad_unit_id']/text()" withText="${admob_interstitials_ad_unit_id}" if="${cofiguration_downloaded}"/>
            <replace path="//resources/string[@name='user_playscape_admob_banners_ad_unit_id']/text()" withText="${admob_banners_ad_unit_id}" if="${cofiguration_downloaded}"/>
       		<replace path="//resources/string[@name='user_playscape_admob_test_device_id']/text()" withText="${admob_test_device_id}" if="${cofiguration_downloaded}"/>
            
            <replace path="//resources/string[@name='user_playscape_chartboost_app_id']/text()" withText="${chartboost_app_id}" if="${cofiguration_downloaded}"/>
            <replace path="//resources/string[@name='user_playscape_chartboost_app_signature']/text()" withText="${chartboost_app_signature}" if="${cofiguration_downloaded}"/>
            
            <replace path="//resources/string[@name='user_playscape_vungle_app_id']/text()" withText="${vungle_app_id}" if="${cofiguration_downloaded}"/>
            <replace path="//resources/string[@name='user_playscape_millennial_media_app_id']/text()" withText="${millennialmedia_app_id}" if="${cofiguration_downloaded}"/>
            
            <replace path="//resources/string[@name='user_playscape_startapp_developer_id']/text()" withText="${startapp_developer_id}" if="${cofiguration_downloaded}"/>
            <replace path="//resources/string[@name='user_playscape_startapp_app_id']/text()" withText="${startapp_app_id}" if="${cofiguration_downloaded}"/>
            
            <replace path="//resources/string[@name='user_playscape_adcolony_app_id']/text()" withText="${adcolony_app_id}" if="${cofiguration_downloaded}"/>
            <replace path="//resources/string[@name='user_playscape_adcolony_video_zone_id']/text()" withText="${adcolony_video_zone_id}" if="${cofiguration_downloaded}"/>
            <replace path="//resources/string[@name='user_playscape_adcolony_incentivised_video_zone_id']/text()" withText="${adcolony_incentivised_video_zone_id}" if="${cofiguration_downloaded}"/>
           
        </xmltask>
        
        <!-- copy modifyed configuration file to project -->
        <copyfile src="${configuration.file.full.path}" dest="${configuration.project.file.path}" forceoverwrite="true"/>
        
        <!-- remove temporary configuration file -->
        <delete file="${downloaded.json.name}"/>
    </target>    
    
    <macrodef name="aspect-patcher">
        <sequential>
            <pathconvert property="expanded.main.class.path" refid="out.dex.jar.input.ref"/>

            <property name="classpath.aspects.aspectjtools" location="../../PlayscapePubKitCocos2D-X/build/tools/aspectsj/aspectjtools.jar"/>
            <property name="classpath.aspects.aspectjrt" location="../../PlayscapePubKitCocos2D-X/build/tools/aspectsj/aspectjrt.jar"/>
            <property name="classpath.playservices.project" location="${sdk.dir}/extras/google/google_play_services/libproject/google-play-services_lib/libs/google-play-servies.jar"/>
            <property name="patcher.aspectpath" location="../../PlayscapePubKitCocos2D-X/build/tools/playscape_lifecycle.jar"/>
            
            <exec executable="java">
                <arg value="-classpath"/>
                <arg value="${classpath.aspects.aspectjtools}${path.separator}${classpath.aspects.aspectjrt}${path.separator}${project.target.android.jar}"/>
                <arg value="-Xmx8g"/>
                <arg value="org.aspectj.tools.ajc.Main"/>
                <arg value="-source"/>
                <arg value="1.5"/>
                <arg value="-Xlint:ignore"/>
                <arg value="-inpath"/>
                <arg value="${out.classes.absolute.dir}"/>
                <arg value="-injars"/>
                <arg value="${expanded.main.class.path}${path.separator}${patcher.aspectpath}"/>
                <arg value="-aspectpath"/>
                <arg value="${patcher.aspectpath}"/>
                <arg value="-outjar"/>
                <arg value="${out.jar.file}"/>
            </exec>
            
        </sequential>
    </macrodef>


    <!-- Configurable macro, which allows to pass as parameters output directory,
     output dex filename and external libraries to dex (optional) -->
    <macrodef name="dex-helper-custom">
        <element name="external-libs" optional="yes" />
        <attribute name="nolocals" default="false" />
        <sequential>
            <!-- sets the primary input for dex. If a pre-dex task sets it to
             something else this has no effect -->

            <!-- set the secondary dx input: the project (and library) jar files
             If a pre-dex task sets it to something else this has no effect -->
            <if>
                <condition>
                    <isreference refid="out.dex.jar.input.ref" />
                </condition>
                <else>
                    <path id="out.dex.jar.input.ref">
                        <path refid="project.all.jars.path" />
                    </path>
                </else>
            </if>
            
            <!-- call aspect patcher to aspply aspects to all .jar and .class files -->
            <aspect-patcher />
            
            <property name="out.dex.input.absolute.dir" value="${out.jar.file}" />
            
            <dex executable="${dx}"
                output="${intermediate.dex.file}"
                dexedlibs="${out.dexed.absolute.dir}"
                nolocals="@{nolocals}"
                forceJumbo="${dex.force.jumbo}"
                disableDexMerger="${dex.disable.merger}"
                verbose="${verbose}">
                <path path="${out.jar.file}"/>
                <external-libs />
            </dex>
        </sequential>
    </macrodef>
    
    <!-- Converts this project's .class files into .dex files -->
    <target name="-dex" depends="-compile, -post-compile, -obfuscate">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <!-- only convert to dalvik bytecode is *not* a library -->
            <do-only-if-not-library elseText="Library project: do not convert bytecode..." >
                <!-- special case for instrumented builds: need to use no-locals and need
                 to pass in the emma jar. -->
                <if condition="${build.is.instrumented}">
                    <then>
                        <dex-helper-custom nolocals="true">
                            <external-libs>
                                <fileset file="${emma.dir}/emma_device.jar" />
                            </external-libs>
                        </dex-helper-custom>
                    </then>
                    <else>
                        <dex-helper-custom />
                    </else>
                </if>
            </do-only-if-not-library>
        </do-only-if-manifest-hasCode>
    </target>



</project>

