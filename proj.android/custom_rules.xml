<?xml version="1.0" encoding="UTF-8"?>

<project>
    <property file="build.properties"/>
    <property name="out.jar.file" location="bin/aspect_classes.jar" />
    <property name="default.application.class" value="com.playscape.playscapeapp.PlayscapeApp"/>

  <property name="playscape.ads.enabled" value="true"/>
	<property name="publishigkit.dir" location="../../PlayscapePubKitCocos2D-X" />
	<property name="publishigkit.assets" location="${publishigkit.dir}/proj.android/PlayscapePublishingKitX/assets" />
	<property name="target.assets" location="./assets" />
    <property name="default.configuration.path" location="../../PlayscapePubKitCocos2D-X/proj.android/PlayscapePublishingKitX/assets/playscape/PlayscapeConfig.xml"/>

	<loadproperties srcFile="ant.properties"/>

	<!-- configuration json file -->
	<property name="downloaded.json.name" location="./configuration.json" />

	<!-- users configuration file name -->
    <property name="configuration.file.name" value="PlayscapeConfig.xml"/>
    <!-- users configuration file full path -->
    <property name="configuration.file.full.path" location="${publishigkit.assets}/playscape/${configuration.file.name}"/>
    <!-- configuration file path in project -->
	<property name="configuration.project.file.path" value="assets/playscape/${configuration.file.name}"/>

	<property name="cp.libs.path" value="../../PlayscapePubKitCocos2D-X/build/tools/PlayscapeCPBootstrapBuilder/libs" />
	<property name="local.libs.path" value="../../PlayscapePubKitCocos2D-X/build/tools/libs" />
	<property name="script.classpath" value="${cp.libs.path}/bsf.jar
	    	${path.separator}${cp.libs.path}/commons-logging-1.0.4.jar
		    ${path.separator}${cp.libs.path}/js.jar
		    ${path.separator}${cp.libs.path}/commons-codec-1.6.jar
		    ${path.separator}${local.libs.path}/httpclient-4.4.1.jar
		    ${path.separator}${local.libs.path}/fluent-hc-4.4.1.jar
		    ${path.separator}${local.libs.path}/httpclient-cache-4.4.1.jar
		    ${path.separator}${local.libs.path}/httpclient-win-4.4.1.jar
		    ${path.separator}${local.libs.path}/httpcore-4.4.1.jar
		    ${path.separator}${local.libs.path}/httpmime-4.4.1.jar
		    ${path.separator}${local.libs.path}/jna-4.1.0.jar
		    ${path.separator}${local.libs.path}/jna-platform-4.1.0.jar" />

	<xmlproperty file="${configuration.file.full.path}" prefix="myconfig" collapseAttributes="true"/>

	<xmlproperty file="AndroidManifest.xml" prefix="mymanifest" collapseAttributes="true"/>

    <path id="class.path">
    	<pathelement path="${classpath}"/>
        <fileset dir="../../PlayscapePubKitCocos2D-X/build/tools/">
            <include name="xmltask.jar"/>
            <include name="com.oopsconsultancy.xmltask-1.16.jar"/>
        </fileset>
    </path>

    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
        <classpath>
            <path refid="class.path"/>
        </classpath>
    </taskdef>

    <target name="-pre-compile">
  <echo>ORIG: ${toString:project.all.jars.path}</echo>
  <!--
         This hack converts the Path object ${project.all.jars} into a string and excluding ads jars from path
  -->
  <property name="project.all.jars.path.orig" value="${toString:project.all.jars.path}"/>
  <script language="javascript" classpath="${script.classpath}"> <![CDATA[
    origpath = String(project.getProperty("project.all.jars.path.orig"));

    if (project.getProperty("playscape.ads.enabled") == "false") {
      var echo = cocos2dxdemo.createTask("echo");
      echo.setMessage("Excluding ads...");
      echo.perform();

      // Returns a new string in which all occurrences of a target string in the receiver are replaced by another given string.
      //
      // @string - target string
      // @find - the string to replace
      // @replace - The string with which to replace @find.
      function replaceAll(string, find, replace) {
        return string.replace(new RegExp(find, 'g'), replace);
      }

      //convert wildcard to regex patterns
      //
      // @pattern - The wildcard which should be converted to regex pattern
      function wildcardToPattern(pattern) {
        pattern = replaceAll(pattern, "\\*", ".*");
        pattern = replaceAll(pattern, "\\?", ".");

        return "^" + pattern + "$";
      }

      wildcards = [
        wildcardToPattern("*com.jirbo*"),
        wildcardToPattern("*com.millennialmedia.*"),
        wildcardToPattern("*com.chartboost.*"),
        wildcardToPattern("*com.startapp*"),
        wildcardToPattern("*com.vungle*"),
        wildcardToPattern("*javax.inject*"),
        wildcardToPattern("*com.nineoldandroids*"),
        wildcardToPattern("*dagger*")
      ];

      pathes = origpath.split(":");
      for (i = 0, count = pathes.length; i < count; i++) {
        pathItem = pathes[i];

        for (j = 0, length = wildcards.length; j < length; j++) {
          matches = pathItem.match(wildcards[j]);
          match = matches === null ? false : true;
          if (match) {
            origpath = replaceAll(origpath, pathItem, "");
          }
        }
      }

      project.setProperty("project.all.jars.path.hacked", origpath);

      echo.setMessage("Jar path after excluding => " + origpath);
      echo.perform();
    } else {
      project.setProperty("project.all.jars.path.hacked", origpath);
    }

  ]]> </script>

    <!-- Redefine project.all.jars.path before -compile executes -->
    <path id="project.all.jars.path">
        <path path="${project.all.jars.path.hacked}" />
    </path>
</target>

    <!-- generate configuration url based on api-key from ant.properties -->
    <target name="-download-configuration">
	    <script language="javascript" manager="bsf" classpath="${script.classpath}"> <!-- we use bsf scripting manager + rhino -->
	        <![CDATA[
		        	importClass(java.io.File);
	                importClass(java.io.FileReader);
	                importClass(java.io.BufferedWriter);
	                importClass(java.io.BufferedReader);
	                importClass(java.io.FileWriter);
	                importClass(org.apache.tools.ant.util.FileUtils);
	                importClass(java.net.URL);
	                importClass(org.xml.sax.InputSource);
	                importClass(java.io.FileInputStream);
					importClass(java.io.IOException);
	                importClass(java.io.FileNotFoundException);
	                importClass(Packages.org.apache.http.client.HttpClient);
	                importClass(Packages.org.apache.http.impl.client.DefaultHttpClient);
	                importClass(Packages.org.apache.http.client.methods.HttpGet);
					importClass(java.io.BufferedReader);
					importClass(java.io.InputStreamReader);
					importClass(java.lang.StringBuffer);
					importClass(java.net.InetAddress);
					importClass(java.net.HttpURLConnection);
					importClass(java.net.URL);


                	var echo = cocos2dxdemo.createTask("echo");

	                var full_api_key = cocos2dxdemo.getProperty("playscape.api.key");

	                var base_url = "https://playscape-backend-prod.appspot.com";
                    if(cocos2dxdemo.getProperty("playscape.base.url")) {
                        base_url = cocos2dxdemo.getProperty("playscape.base.url");
                    }

                	if(full_api_key) {
		                var jsonData;

		                // example configuration url
		                // https://api.playscape.com/config?api_key=<Y1ROp0kVhFF7h61Go3PzFQS3aEUGxFMt>

		                var url = base_url + "/config?api_key=" + full_api_key;

                        // we'll use it to determine if no connectivity or something wrong on server side
                        // its need to workaround rethrowing exception
                        var hasInternetConnection = true;

		                try {
			                // download json
						 	var client = new DefaultHttpClient();
							var request = new HttpGet(url);

					 		var USER_AGENT = "Mozilla/5.0";
							// add request header
							request.addHeader("User-Agent", USER_AGENT);

							var response = client.execute(request);

							var rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));

							var result = new StringBuffer();
							var line = "";
							while ((line = rd.readLine()) != null) {
								result.append(line);
							}

							// parse json

			                // Evaluate json
			                jsonData = JSON.parse(result.toString());
						} catch(e if e instanceof IOException) {
		                	echo.setMessage("Warning!!! Could not download game configuration. Please check your internet connection");
							echo.perform();
                            hasInternetConnection = false;
		                }

						if(jsonData) {
							if(response.getStatusLine().getStatusCode() == 200) {
								// we'll use properties to update users configuration

                        cocos2dxdemo.setProperty("analytics_reporter_id", jsonData.config.analytics_report.reporter_id);
                        cocos2dxdemo.setProperty("ads_config_url", jsonData.config.ads_config.url);

				               	cocos2dxdemo.setProperty("admob_interstitials_ad_unit_id", jsonData.config.admob.interstitials_ad_unit_id);
				               	cocos2dxdemo.setProperty("admob_banners_ad_unit_id", jsonData.config.admob.banners_ad_unit_id);
				               	cocos2dxdemo.setProperty("admob_test_device_id", jsonData.config.admob.test_device_id);

				               	cocos2dxdemo.setProperty("chartboost_app_id", jsonData.config.chartboost.app_id);
				               	cocos2dxdemo.setProperty("chartboost_app_signature", jsonData.config.chartboost.app_signature);

				               	cocos2dxdemo.setProperty("vungle_app_id", jsonData.config.vungle.app_id);
				               	cocos2dxdemo.setProperty("millennialmedia_app_id", jsonData.config.millennialmedia.app_id);

				               	cocos2dxdemo.setProperty("startapp_developer_id", jsonData.config.startapp.developer_id);
				               	cocos2dxdemo.setProperty("startapp_app_id", jsonData.config.startapp.app_id);

				               	cocos2dxdemo.setProperty("adcolony_app_id", jsonData.config.adcolony.app_id);
				               	cocos2dxdemo.setProperty("adcolony_video_zone_id", jsonData.config.adcolony.video_zone_id);
				               	cocos2dxdemo.setProperty("adcolony_incentivised_video_zone_id", jsonData.config.adcolony.incentivised_video_zone_id);

                        cocos2dxdemo.setProperty("is_published_by_playscape", jsonData.config.published_by_playscape);

				               	// set property to determine that configuration was downloaded and should be updated
				            	  cocos2dxdemo.setProperty("cofiguration_downloaded", "true");
							} else {
								if(jsonData.message) {
									throw "Error!!! Could not retrieve configuration from the server. Message: " + jsonData.message;
								} else {
									throw "Error!!! Could not retrieve configuration from the server.";
								}
							}
						} else if(hasInternetConnection) {
                            throw "Error!!! Could not retrieve configuration from the server.";
                        }
					} else {
						throw "Error!!! API key must be set";
					}
                	// apply configuration
	            ]]>
	    </script>
	</target>

    <target name="-pre-build" depends="-copy-template-assets, -download-configuration, -apply-configuration">
        <xmltask source="AndroidManifest.xml" dest="AndroidManifest.xml">
            <copy path="//manifest/application[@android:name]/text()" property="XML_EXISTS_ALREADY" />
            <attr path="//manifest/application" attr="android:name" value="${default.application.class}" unless="XML_EXISTS_ALREADY"/>
        </xmltask>
    </target>

    <target name="-copy-template-assets">
      <copy todir="${target.assets}" overwrite="true">
        <fileset dir="${publishigkit.assets}" />
      </copy>
    </target>

    <target name="-apply-configuration" depends="-configuration-check, -read-default-configuration" if="configuration.check.result">
      <echo>### Updating default configuration with '${api.key}' apikey ###</echo>

      <antcall target="-apply-configuration-to-config-file"/>

      <echo>### DONE ###</echo>
    </target>

    <target name="-apply-configuration-to-config-file" depends="-read-build-configuration">
      <echo>### Updating the configuration file ###</echo>

      <xmltask source="${configuration.file.full.path}" dest="${configuration.project.file.path}">

        <insert path="//resources" position="under">
        <![CDATA[
        <string name="user_playscape_remote_logger_url">${remote_logger_url}</string>
        <string name="user_playscape_publishing_kit_version">${publishing_kit_version}</string>
        <string name="user_playscape_ads_api_key">${playscape.api.key}</string>
        <string name="user_playscape_reporter_id">${analytics_reporter_id}</string>
        <string name="user_playscape_ads_config_url">${ads_config_url}</string>
        <string name="user_playscape_ads_config_enable_ads_system">${playscape.ads.enabled}</string>
        <string name="user_playscape_adcolony_incentivised_video_zone_id">${adcolony_incentivised_video_zone_id}</string>
        <string name="user_playscape_admob_interstitials_ad_unit_id">${admob_interstitials_ad_unit_id}</string>
        <string name="user_playscape_admob_banners_ad_unit_id">${admob_banners_ad_unit_id}</string>
        <string name="user_playscape_admob_test_device_id">${admob_test_device_id}</string>
        <string name="user_playscape_chartboost_app_id">${chartboost_app_id}</string>
        <string name="user_playscape_chartboost_app_signature">${chartboost_app_signature}</string>
        <string name="user_playscape_vungle_app_id">${vungle_app_id}</string>
        <string name="user_playscape_millennial_media_app_id">${millennialmedia_app_id}</string>
        <string name="user_playscape_startapp_developer_id">${startapp_developer_id}</string>
        <string name="user_playscape_startapp_app_id">${startapp_app_id}</string>
        <string name="user_playscape_adcolony_app_id">${adcolony_app_id}</string>
        <string name="user_playscape_adcolony_video_zone_id">${adcolony_video_zone_id}</string>
        <string name="user_playscape_adcolony_incentivised_video_zone_id">${adcolony_incentivised_video_zone_id}</string>
        <string name="user_playscape_is_published_by_playscape">${is_published_by_playscape}</string>
        ]]>
        </insert>
     </xmltask>
    </target>

    <target name="-read-build-configuration">
      <xmltask>
        <fileset file="${default.configuration.path}"/>
        <copy path="//resources/string[@name='playscape_remote_logger_url']/text()" property="remote_logger_url"/>
        <copy path="//resources/string[@name='playscape_publishing_kit_version']/text()" property="publishing_kit_version"/>
      </xmltask>
    </target>

    <target name="-read-default-configuration" unless="configuration.check.result">
      <xmltask>
        <fileset file="${default.configuration.path}"/>
        <copy path="//resources/string[@name='playscape_reporter_id']/text()" property="analytics_reporter_id"/>
        <copy path="//resources/string[@name='playscape_ads_config_url']/text()" property="ads_config_url"/>
        <copy path="//resources/string[@name='playscape_adcolony_incentivised_video_zone_id']/text()" property="adcolony_incentivised_video_zone_id"/>

        <copy path="//resources/string[@name='playscape_admob_interstitials_ad_unit_id']/text()" property="admob_interstitials_ad_unit_id"/>
        <copy path="//resources/string[@name='playscape_admob_banners_ad_unit_id']/text()" property="admob_banners_ad_unit_id"/>
        <copy path="//resources/string[@name='playscape_admob_test_device_id']/text()" property="admob_test_device_id"/>

        <copy path="//resources/string[@name='playscape_chartboost_app_id']/text()" property="chartboost_app_id"/>
        <copy path="//resources/string[@name='playscape_chartboost_app_signature']/text()" property="chartboost_app_signature"/>

        <copy path="//resources/string[@name='playscape_vungle_app_id']/text()" property="vungle_app_id"/>
        <copy path="//resources/string[@name='playscape_millennial_media_app_id']/text()" property="millennialmedia_app_id"/>

        <copy path="//resources/string[@name='playscape_startapp_developer_id']/text()" property="startapp_developer_id"/>
        <copy path="//resources/string[@name='playscape_startapp_app_id']/text()" property="startapp_app_id"/>

        <copy path="//resources/string[@name='playscape_adcolony_app_id']/text()" property="adcolony_app_id"/>
        <copy path="//resources/string[@name='playscape_adcolony_video_zone_id']/text()" property="adcolony_video_zone_id"/>
        <copy path="//resources/string[@name='playscape_adcolony_incentivised_video_zone_id']/text()" property="adcolony_incentivised_video_zone_id"/>

        <copy path="//resources/string[@name='playscape_is_published_by_playscape']/text()" property="is_published_by_playscape"/>

      </xmltask>

      <antcall target="-apply-configuration-to-config-file"/>

      <echo>### DONE ###</echo>
    </target>

    <target name="-configuration-check">
      <condition property="configuration.check.result">
        <equals arg1="${cofiguration_downloaded}" arg2="true" trim="true"/>
      </condition>
    </target>

    <macrodef name="aspect-patcher">
        <sequential>
            <pathconvert property="expanded.main.class.path" refid="out.dex.jar.input.ref"/>

            <property name="classpath.aspects.aspectjtools" location="../../PlayscapePubKitCocos2D-X/build/tools/aspectsj/aspectjtools.jar"/>
            <property name="classpath.aspects.aspectjrt" location="../../PlayscapePubKitCocos2D-X/build/tools/aspectsj/aspectjrt.jar"/>
            <property name="classpath.playservices.project" location="${sdk.dir}/extras/google/google_play_services/libproject/google-play-services_lib/libs/google-play-servies.jar"/>
            <property name="patcher.aspectpath" location="../../PlayscapePubKitCocos2D-X/build/tools/playscape_lifecycle.jar"/>

            <exec executable="java">
                <arg value="-classpath"/>
                <arg value="${classpath.aspects.aspectjtools}${path.separator}${classpath.aspects.aspectjrt}${path.separator}${project.target.android.jar}"/>
                <arg value="-Xmx8g"/>
                <arg value="org.aspectj.tools.ajc.Main"/>
                <arg value="-source"/>
                <arg value="1.5"/>
                <arg value="-Xlint:ignore"/>
                <arg value="-inpath"/>
                <arg value="${out.classes.absolute.dir}"/>
                <arg value="-injars"/>
                <arg value="${expanded.main.class.path}${path.separator}${patcher.aspectpath}"/>
                <arg value="-aspectpath"/>
                <arg value="${patcher.aspectpath}"/>
                <arg value="-outjar"/>
                <arg value="${out.jar.file}"/>
            </exec>

        </sequential>
    </macrodef>


    <!-- Configurable macro, which allows to pass as parameters output directory,
     output dex filename and external libraries to dex (optional) -->
    <macrodef name="dex-helper-custom">
        <element name="external-libs" optional="yes" />
        <attribute name="nolocals" default="false" />
        <sequential>
            <!-- sets the primary input for dex. If a pre-dex task sets it to
             something else this has no effect -->

            <!-- set the secondary dx input: the project (and library) jar files
             If a pre-dex task sets it to something else this has no effect -->
            <if>
                <condition>
                    <isreference refid="out.dex.jar.input.ref" />
                </condition>
                <else>
                    <path id="out.dex.jar.input.ref">
                        <path refid="project.all.jars.path" />
                    </path>
                </else>
            </if>

            <!-- call aspect patcher to aspply aspects to all .jar and .class files -->
            <aspect-patcher />

            <property name="out.dex.input.absolute.dir" value="${out.jar.file}" />

            <dex executable="${dx}"
                output="${intermediate.dex.file}"
                dexedlibs="${out.dexed.absolute.dir}"
                nolocals="@{nolocals}"
                forceJumbo="${dex.force.jumbo}"
                disableDexMerger="${dex.disable.merger}"
                verbose="${verbose}">
                <path path="${out.jar.file}"/>
                <external-libs />
            </dex>
        </sequential>
    </macrodef>

    <!-- Converts this project's .class files into .dex files -->
    <target name="-dex" depends="-compile, -post-compile, -obfuscate">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <!-- only convert to dalvik bytecode is *not* a library -->
            <do-only-if-not-library elseText="Library project: do not convert bytecode..." >
                <!-- special case for instrumented builds: need to use no-locals and need
                 to pass in the emma jar. -->
                <if condition="${build.is.instrumented}">
                    <then>
                        <dex-helper-custom nolocals="true">
                            <external-libs>
                                <fileset file="${emma.dir}/emma_device.jar" />
                            </external-libs>
                        </dex-helper-custom>
                    </then>
                    <else>
                        <dex-helper-custom />
                    </else>
                </if>
            </do-only-if-not-library>
        </do-only-if-manifest-hasCode>
    </target>

</project>
